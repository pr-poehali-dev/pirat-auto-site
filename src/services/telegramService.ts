import TelegramBot from "node-telegram-bot-api";
import { Car, PreOrder } from "@/lib/supabase";
import { CarService } from "./carService";

export interface TelegramConfig {
  botToken: string;
  chatId?: string;
  webhookUrl?: string;
}

export class TelegramService {
  private bot: TelegramBot | null = null;
  private config: TelegramConfig;

  constructor(config: TelegramConfig) {
    this.config = config;
    this.initBot();
  }

  private initBot() {
    try {
      if (this.config.botToken && this.config.botToken !== "your-bot-token") {
        this.bot = new TelegramBot(this.config.botToken, { polling: false });
        this.setupCommands();
      }
    } catch (error) {
      console.warn("Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:", error);
    }
  }

  private setupCommands() {
    if (!this.bot) return;

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ
    this.bot.onText(/\/cars/, async (msg) => {
      const chatId = msg.chat.id;
      try {
        const cars = await CarService.getFeaturedCars();
        const message = this.formatCarsMessage(cars);
        await this.bot?.sendMessage(chatId, message, {
          parse_mode: "Markdown",
        });
      } catch (error) {
        await this.bot?.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π");
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ –ø–æ –º–∞—Ä–∫–µ
    this.bot.onText(/\/search (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const searchTerm = match?.[1] || "";

      try {
        const cars = await CarService.getAllCars({ make: searchTerm });
        const message =
          cars.length > 0
            ? this.formatCarsMessage(cars)
            : `üîç –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`;

        await this.bot?.sendMessage(chatId, message, {
          parse_mode: "Markdown",
        });
      } catch (error) {
        await this.bot?.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞");
      }
    });
  }

  private formatCarsMessage(cars: Car[]): string {
    if (cars.length === 0) {
      return "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
    }

    let message = `üöó *–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${cars.length}*\n\n`;

    cars.slice(0, 5).forEach((car, index) => {
      message += `${index + 1}. *${car.make} ${car.model}* (${car.year})\n`;
      message += `üí∞ ${car.price.toLocaleString("ru-RU")} ‚ÇΩ\n`;
      message += `üìä ${car.mileage.toLocaleString("ru-RU")} –∫–º | ${car.fuel} | ${car.transmission}\n\n`;
    });

    if (cars.length > 5) {
      message += `... –∏ –µ—â–µ ${cars.length - 5} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`;
    }

    return message;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  async notifyNewOrder(order: PreOrder, car: Car) {
    if (!this.bot || !this.config.chatId) return;

    const message = `
üéâ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*

üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* ${car.make} ${car.model} (${car.year})
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${order.customer_name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.customer_phone}
${order.customer_email ? `üìß *Email:* ${order.customer_email}` : ""}
${order.comment ? `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${order.comment}` : ""}
üí∞ *–¶–µ–Ω–∞:* ${car.price.toLocaleString("ru-RU")} ‚ÇΩ

üìÖ *–î–∞—Ç–∞:* ${new Date(order.created_at).toLocaleString("ru-RU")}
    `.trim();

    try {
      await this.bot.sendMessage(this.config.chatId, message, {
        parse_mode: "Markdown",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:", error);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram
  async syncCarData(carData: {
    make: string;
    model: string;
    year: number;
    price: number;
    description?: string;
  }) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ —á–µ—Ä–µ–∑ Telegram
    console.log("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram:", carData);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
  async getStats(): Promise<string> {
    try {
      const allCars = await CarService.getAllCars();
      const featuredCars = await CarService.getFeaturedCars();

      return `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞*

üöó –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${allCars.length}
‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö: ${featuredCars.length}
üè† –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: ${allCars.filter((c) => c.country === "domestic").length}
üåç –ó–∞—Ä—É–±–µ–∂–Ω—ã—Ö: ${allCars.filter((c) => c.country === "foreign").length}

üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(allCars.reduce((sum, car) => sum + car.price, 0) / allCars.length).toLocaleString("ru-RU")} ‚ÇΩ
      `.trim();
    } catch (error) {
      return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏";
    }
  }
}

export default TelegramService;
